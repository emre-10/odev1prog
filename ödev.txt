#future modülünden division özelliğini aç
from __future__ import division
#ramdom modlünü getir
import random
#path modülünü çağır ve aç
from os import path
#pygame modülünü aç
import pygame

#fotoğraflar için bu klosörü çağır
FOTOĞRAFLAR = path.join(path.dirname(__file__), 'fotoğraflar')
#sesler için bu klosörü çağır
SES_DOSYALARI = path.join(path.dirname(__file__), 'ses dosyaları')

#açılan pencerenin boyutları
YATAY_EKRAN_BOYUTU= 700
DİKEY_EKRAN_BOYUTU= 650
#oyundan alınan en yüksek fps
FPS = 60
#güç artışı 10 sn sürer
GÜÇLENDİRME = 10000
#can barı boyutları
KALKANIN_CANI = 200
KALKAN_CANININ_KALINLIĞI = 10

#oyundaki renkler
BEYAZ = (255, 255, 255)
SİYAH = (0, 0, 0)
KIRMIZI = (255, 0, 0)
#YEŞİL = (0, 255, 0)
#MAVİ = (0, 0, 255)
#SARI = (255, 255, 0)


pygame.init() #pygame için gerekli modülleri açar
pygame.mixer.init()  # #bunu bilmiyorum
PENCERE = pygame.display.set_mode((YATAY_EKRAN_BOYUTU, DİKEY_EKRAN_BOYUTU)) #oyunun penceresinin boyutları
pygame.display.set_caption(" UZAY MACERASI ") # oyunun penceresinin ismi
clock = pygame.time.Clock() #fps ayarlayıcı    


YAZI_FONTU = pygame.font.match_font('Courier New') # oyundaki yazıların fontu

## girdiğimiz değerleri ekranda gösteren komut 
def main_menu():
    global PENCERE #tüm ekran

    pygame.mixer.music.load(path.join(SES_DOSYALARI, "hans-zimmer-time.mp3")) # menü müziğini açar
    pygame.mixer.music.play(1)   ### oyunun müziğini sonsuz olarak tekar eder

    title = pygame.image.load(path.join(FOTOĞRAFLAR , "interstellar 2.png")).convert()# oyunun arka plan resmi
    title = pygame.transform.scale(title, (YATAY_EKRAN_BOYUTU, DİKEY_EKRAN_BOYUTU), PENCERE)# arka plan boyutu tam pencere

    PENCERE.blit(title, (0,0))  #
    pygame.display.update() #pencereye yukarıdakileri ekle

    while True: #pencere döngüsünü açık tut
        ev = pygame.event.poll() 
        if ev.type == pygame.KEYDOWN:
            if ev.key == pygame.K_RETURN:
                break
            elif ev.key == pygame.K_q:
                pygame.quit()
                quit()
        elif ev.type == pygame.QUIT:
                pygame.quit()
                quit() 
        else:
            draw_text(PENCERE, "Başlamak için [ENTER] bas", 30, YATAY_EKRAN_BOYUTU/2, DİKEY_EKRAN_BOYUTU/2) #ekrana yazı yazma boyutunu ayrlama ve nereye yazacağımız
            draw_text(PENCERE, "Çıkmak için [Q] bas ", 30, YATAY_EKRAN_BOYUTU/2, (DİKEY_EKRAN_BOYUTU/2)+40) #ekrana yazı yazma boyutunu ayrlama ve nereye yazacağımız
            pygame.display.update() ## yazdığımız şeyleri ekrana yükleme

    
    ready= pygame.mixer.Sound(path.join(SES_DOSYALARI,'getready.ogg')) #oyuna girerken bu sesi getir 
    ready.play()  ### müzüiği başlat
    PENCERE.fill(SİYAH) ### tüm ekranı siyah renk yap
    draw_text(PENCERE, "HAZIRLAN!", 40, YATAY_EKRAN_BOYUTU/2, DİKEY_EKRAN_BOYUTU/2) #ekrana yazı yazma boyutunu ayrlama ve nereye yazacağımız
    pygame.display.update() ## yazdığımız şeyleri ekrana yükleme
    

def draw_text(surf, text, size, x, y): ## oyun başlamadan önceki yazıların komutları ekrana vermeyi sağlar
    font = pygame.font.Font(YAZI_FONTU, size)
    text_surface = font.render(text, True, KIRMIZI) # Ekrana gelen hazırlan yazısının kırmızı renk yapar         
    text_rect = text_surface.get_rect()
    text_rect.midtop = (x, y)
    surf.blit(text_surface, text_rect)


def draw_shield_bar(surf, x, y, pct): #kalkan ayarları
    pct = max(pct, 0) 
    fill = (pct / 100) * KALKANIN_CANI # kalkan barının etrafındaki beyaz çizginin uzunlığu
    outline_rect = pygame.Rect(x, y, KALKANIN_CANI,KALKAN_CANININ_KALINLIĞI) ## kalkan barını saran çizgi
    fill_rect = pygame.Rect(x, y, fill,KALKAN_CANININ_KALINLIĞI) #kalkan barı
    pygame.draw.rect(surf, SİYAH, fill_rect) ##kalkan barının rengi
    pygame.draw.rect(surf, BEYAZ, outline_rect, 2) # beyaz çizginin kalınlığı


def draw_lives(surf, x, y, lives, img): # geminin can ayarı
    for i in range(lives): ##geminin kaç canı var
        img_rect= img.get_rect() ##
        img_rect.x = x + 1 * i
        img_rect.y = y
        surf.blit(img, img_rect)



def newmob():
    mob_element = Mob()
    all_sprites.add(mob_element)
    mobs.add(mob_element)

class Explosion(pygame.sprite.Sprite):
    def __init__(self, center, size):
        pygame.sprite.Sprite.__init__(self)
        self.size = size
        self.image = explosion_anim[self.size][0]
        self.rect = self.image.get_rect()
        self.rect.center = center
        self.frame = 0 
        self.last_update = pygame.time.get_ticks()
        self.frame_rate = 75

    def update(self):
        now = pygame.time.get_ticks()
        if now - self.last_update > self.frame_rate:
            self.last_update = now
            self.frame += 1
            if self.frame == len(explosion_anim[self.size]):
                self.kill()
            else:
                center = self.rect.center
                self.image = explosion_anim[self.size][self.frame]
                self.rect = self.image.get_rect()
                self.rect.center = center


class Player(pygame.sprite.Sprite):
    def __init__(self):
        pygame.sprite.Sprite.__init__(self)
        ## scale the player img down
        self.image = pygame.transform.scale(Uzay_Gemisi, (50, 38)) ##uzay gemisinin boyutları
        self.image.set_colorkey(SİYAH) # uzay gemisin,n arka planı arka planı
        self.rect = self.image.get_rect()
        self.radius = 20 ###meteorlardan alınan puan ve kalkan hesaplaması
        self.rect.centerx = YATAY_EKRAN_BOYUTU/ 2 # uzay gemisinin hangi konumda başlayacağı x=350
        self.rect.bottom = DİKEY_EKRAN_BOYUTU - 10 #uzay gemisinin hangi konumda gezeceğini belirten kod y=640 gemi gezer
        self.speedx = 0,1 ## oyundaki nesnelerin hızı
        self.shield = 100 ### kalkanın kaç can verdiği
        self.shoot_delay = 500 ## ateş etme aralığı ##1000 delay 1 saniye      
        self.last_shot = pygame.time.get_ticks() 
        self.lives = 1 ## oyundaki can  sayısı
        self.hidden = False
        self.hide_timer = pygame.time.get_ticks()
        self.power = 1 ## oyundaki atış gücü
        self.power_timer = pygame.time.get_ticks()

    def update(self):
        
        if self.power >=2 and pygame.time.get_ticks() - self.power_time > GÜÇLENDİRME: ## her yıldırımı aldığında gücün artar
            self.power -= 1    ##geminin normal atış gücü
            self.power_time = pygame.time.get_ticks() ##gücünün kaç saniye arrtığını

        ## unhide 
        if self.hidden and pygame.time.get_ticks() - self.hide_timer > 1000:
            self.hidden = False
            self.rect.centerx = YATAY_EKRAN_BOYUTU/ 2
            self.rect.bottom = DİKEY_EKRAN_BOYUTU- 30

        self.speedx = 0   
       
        keystate = pygame.key.get_pressed()     #### klavyedeki tüm tuşları kullanılabilir hale getirir
        if keystate[pygame.K_a]: ## a tuşu oyun gemisini x ekseninde -5 hareket ettirir
            self.speedx = -5 ## oyun gemisinin x ekseninde -5 hareket ettiren komut
        elif keystate[pygame.K_d]: ## d tuşu oyun gemisini x ekseninde 5 hareket ettirir
            self.speedx = 5  ## oyun gemisinin x ekseninde +5 hareket ettiren komut

        
        if keystate[pygame.K_SPACE]: ## speace ateş etme tuşu
            self.shoot() ## ateş komutu

        
        if self.rect.right > YATAY_EKRAN_BOYUTU: ## geminin sağ tarafa dogru gideceği değerler
            self.rect.right = YATAY_EKRAN_BOYUTU ## geminin sağ tarafa doğrugidecegi son yer x=700
        if self.rect.left < 0:  ## geminin sağ tarafa dogru gideceği değerler
            self.rect.left = 0  ## geminin sağ tarafa doğrugidecegi son yer x=700

        self.rect.x += self.speedx

    def shoot(self):
       
        now = pygame.time.get_ticks()
        if now - self.last_shot > self.shoot_delay:
            self.last_shot = now
            if self.power == 1:    ##geminin güç 1 atısla aşağıdakiler olsun
                bullet = Bullet(self.rect.centerx, self.rect.top)
                all_sprites.add(bullet)
                bullets.add(bullet)
                shooting_sound.play()
            if self.power == 2: ### eğer güç seviyesi ikiyse aşağıdakiler olsun
                bullet1 = Bullet(self.rect.left, self.rect.centery)
                bullet2 = Bullet(self.rect.right, self.rect.centery)
                all_sprites.add(bullet1)
                all_sprites.add(bullet2)
                bullets.add(bullet1)
                bullets.add(bullet2)
                shooting_sound.play()

            
            if self.power >= 3: ##### eğer güç seviyesi üç ise aşşagıdakiler olsun
                bullet1 = Bullet(self.rect.left, self.rect.centery)
                bullet2 = Bullet(self.rect.right, self.rect.centery)
                missile1 = Missile(self.rect.centerx, self.rect.top)
                all_sprites.add(bullet1)
                all_sprites.add(bullet2)
                all_sprites.add(missile1)
                bullets.add(bullet1)
                bullets.add(bullet2)
                bullets.add(missile1)
                shooting_sound.play()

    def powerup(self): ##
        self.power += 1 ### güç her alıdığında  
        self.power_time = pygame.time.get_ticks() ## her güçlendime aldğındaki zamanı

    def hide(self):
        self.hidden = True
        self.hide_timer = pygame.time.get_ticks()
        self.rect.center = (YATAY_EKRAN_BOYUTU/ 2, DİKEY_EKRAN_BOYUTU + 200)


##### BURASI YUKARIDAN DÜŞEN GÖKTAŞALRINI KONTOROL ETTİĞİMİZ
class Mob(pygame.sprite.Sprite):
    def __init__(self):   
        pygame.sprite.Sprite.__init__(self)
        self.image_orig = random.choice(Meteor_Resimleri)
        self.image_orig.set_colorkey(SİYAH)
        self.image = self.image_orig.copy()
        self.rect = self.image.get_rect()
        self.radius = int(self.rect.width *.90 / 2)
        self.rect.x = random.randrange(0, YATAY_EKRAN_BOYUTU - self.rect.width)
        self.rect.y = random.randrange(-150, -100)
        self.speedy = random.randrange(5, 20)       

        
        self.speedx = random.randrange(-3, 3) ## GÖKTAŞLARININ SAĞA SOLA GİTME HIZI
 
        
        self.rotation = 0
        self.rotation_speed = random.randrange(-8, 8)  ### göktaşlarının yere düşme ve kendi ekseninde dönme hızı
        self.last_update = pygame.time.get_ticks()  
        
    def rotate(self):
        time_now = pygame.time.get_ticks()
        if time_now - self.last_update > 50:
            self.last_update = time_now
            self.rotation = (self.rotation + self.rotation_speed) % 360 
            new_image = pygame.transform.rotate(self.image_orig, self.rotation)
            old_center = self.rect.center
            self.image = new_image
            self.rect = self.image.get_rect()
            self.rect.center = old_center

    def update(self):
        self.rotate()
        self.rect.x += self.speedx
        self.rect.y += self.speedy
             
                    ###
        if (self.rect.top > DİKEY_EKRAN_BOYUTU + 10) or (self.rect.left < -25) or (self.rect.right > YATAY_EKRAN_BOYUTU+ 20):
            self.rect.x = random.randrange(0, YATAY_EKRAN_BOYUTU - self.rect.width)
            self.rect.y = random.randrange(-100, -40)
            self.speedy = random.randrange(1,8) ### gelen göktaşının hızını ayarlar      


class Pow(pygame.sprite.Sprite):
    def __init__(self, center):
        pygame.sprite.Sprite.__init__(self)
        self.type = random.choice(['shield', 'gun']) ### güçlendirme ve kalkanın random olarak gelmesi 
        self.image = powerup_images[self.type]
        self.image.set_colorkey(SİYAH) ## KALKAN VE GÜÇLEMDİRMENİN ARKA PLANI
        self.rect = self.image.get_rect()        
        self.rect.center = center
        self.speedy = 3 ## DÜŞEN GÜÇLENDİRME VE KALKANIN YERE DÜŞME HIZI

    def update(self):
       
        self.rect.y += self.speedy
        if self.rect.top > DİKEY_EKRAN_BOYUTU:
            self.kill()

            


class Bullet(pygame.sprite.Sprite):
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = Lazer_Atışı ## LAZER IŞINI ÇAĞIRIR
        self.image.set_colorkey(SİYAH) ## LAZER IŞIĞININ ARKA PLANINI SİYAH YAPAR
        self.rect = self.image.get_rect() 
        self.rect.bottom = y 
        self.rect.centerx = x
        self.speedy = -10 ## IŞININ HIZINI AYARLAR

    def update(self):
        
        self.rect.y += self.speedy
        
        if self.rect.bottom < 0:
            self.kill()


class Missile(pygame.sprite.Sprite): ### OYUNUN 3 SEVİYE GÜÇLENDİRİCİDEKİ ATAN FÜZENİN AYARLARI
    def __init__(self, x, y):
        pygame.sprite.Sprite.__init__(self)
        self.image = Füze_atışı #### FÜZEYİ PNGSİNİ ÇAĞIRIR
        self.image.set_colorkey(SİYAH) ## FÜZENİN ARKA PLANINI SİYAH YAPAR
        self.rect = self.image.get_rect()
        self.rect.bottom = y  ## FÜZENİN Y DEKİ DURUMU
        self.rect.centerx = x  ## UZAY GEMİSİ NEREDEYSE FÜZE ORADAN BAŞLAR
        self.speedy = -10 ## FÜZENİN HIZI

    def update(self):
        self.rect.y += self.speedy
        if self.rect.bottom < 0:
            self.kill()


## gerekli resim dosyalarını çağırma

ARKAPLAN = pygame.image.load(path.join(FOTOĞRAFLAR , 'starfield.png')).convert() ## Arkaplanı çağıran komut 
background_rect = ARKAPLAN.get_rect()

Uzay_Gemisi = pygame.image.load(path.join(FOTOĞRAFLAR, 'uzay gemisi.png')).convert()
Uzay_Gemisi_Küçük = pygame.transform.scale(Uzay_Gemisi, (25, 19)) ### küçük olan uzay gemisinin boyutu
Uzay_Gemisi_Küçük.set_colorkey(SİYAH) ## küçük olan uzay gemisinin rengi
Lazer_Atışı = pygame.image.load(path.join(FOTOĞRAFLAR, 'laserRed16.png')).convert()
Füze_atışı = pygame.image.load(path.join(FOTOĞRAFLAR, 'missile.png')).convert_alpha()
Meteor_Resimleri = [] ## meteor resimleri
Meteorların_Listesi = [   ### meteorların listesi
    'meteorBrown_big1.png',
    'meteorBrown_big2.png', 
    'meteorBrown_med1.png', 
    'meteorBrown_med3.png',
    'meteorBrown_small1.png',
    'meteorBrown_small2.png',
    'meteorBrown_tiny1.png'
]

for image in Meteorların_Listesi:
    Meteor_Resimleri.append(pygame.image.load(path.join(FOTOĞRAFLAR, image)).convert())

## meteor patlaması ayarları
explosion_anim = {}
explosion_anim['lg'] = []
explosion_anim['sm'] = []
explosion_anim['player'] = []
for i in range(9):
    filename = 'regularExplosion0{}.png'.format(i)
    img = pygame.image.load(path.join(FOTOĞRAFLAR, filename)).convert()
    img.set_colorkey(SİYAH)
   #### meteor patlaması boyutları
    img_lg = pygame.transform.scale(img, (75, 75))  #### metorların patlama efekti
    explosion_anim['lg'].append(img_lg)
    img_sm = pygame.transform.scale(img, (200, 200)) ### uazay gemisinin patlama efekti
    explosion_anim['sm'].append(img_sm)


    filename = 'sonicExplosion0{}.png'.format(i)
    img = pygame.image.load(path.join(FOTOĞRAFLAR, filename)).convert()
    img.set_colorkey(SİYAH)
    explosion_anim['player'].append(img)

## güçlendirmelerin png dosyası
powerup_images = {}
powerup_images['shield'] = pygame.image.load(path.join(FOTOĞRAFLAR, 'can.png')).convert()
powerup_images['gun'] = pygame.image.load(path.join(FOTOĞRAFLAR, 'güç.png')).convert()



### ses dosyalarını yükleme

shooting_sound = pygame.mixer.Sound(path.join(SES_DOSYALARI, 'jump.wav')) ##ateş sırasında bu sesi çalsın
expl_sounds = []
for sound in ['enemy_explosion.wav', 'expl6.wav']:   ### Patlama anında ikisinden biri rastgele çalsın
    expl_sounds.append(pygame.mixer.Sound(path.join(SES_DOSYALARI, sound)))

pygame.mixer.music.set_volume(1.0)     ### ses seviyesi

player_die_sound = pygame.mixer.Sound(path.join(SES_DOSYALARI, 'enemy_explosion.wav'))  #Canın bittiğinde bu sesi çal



Oyunun_aktif = True ### sonsuz dongü aktif
menu_display = True
while Oyunun_aktif:
    if menu_display:
        main_menu()
        pygame.time.wait(1000)  #### hazırlan ekranını kaç saniye açık durcağını ayarlar

    
        pygame.mixer.music.stop() ### oyunun menü müziği durdurur
       
        pygame.mixer.music.load(path.join(SES_DOSYALARI, 'yıldızlar arasışarkıasd.mp3')) ### oyunun içindeki müziği başlatır
        pygame.mixer.music.play(1)     #### oyunn müziğini sonsuz kere oynatır
        
        menu_display = False ## bu kısmı kapatır
        
        ###oyunnun iç kısmını çağırır
        all_sprites = pygame.sprite.Group() 
        player = Player()  ##uzay geminiçağırır
        all_sprites.add(player)  

        
        mobs = pygame.sprite.Group()  #meteorları çağırır
        for i in range(10):      ##### meteorları rastgele olarak çağırır
          
            newmob()

       
        bullets = pygame.sprite.Group()
        powerups = pygame.sprite.Group() ## güçlendirmeyle

       
        SKOR = 0 ##### SKOR EKRANI
        
    #1 Process input/events
    clock.tick(FPS)     ## Oyunu sabit bir hızda çalıştırır
    for event in pygame.event.get():    ###şimdiye kadar gerçekleşen tüm olayları alır ve sekmelerini tutar.
        
        if event.type == pygame.QUIT:  ##  oyunu kapatırsak oyun kapanır
            Oyunun_aktif = False  # oynu bitir

        ## oyun içindeyken ESC ye basınca oyunu kapat
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                Oyunun_aktif = False
      

     ## lazerin meteorlara çarpıp çarpmadığını kontorol et 
    all_sprites.update() 

   ###### eğer karptıysa patlama resimlerini koy ve meteorları yeniden rastgele oluştur
    hits = pygame.sprite.groupcollide(mobs, bullets, True, True)
  
    for hit in hits:
        SKOR += 50 - hit.radius         ### skor sayısını ayarlar büyük ve küçük meteorlara göre
        random.choice(expl_sounds).play() #### meteorları patladığımızda bu sesi çal 
       
        expl = Explosion(hit.rect.center, 'lg')
        all_sprites.add(expl)
        if random.random() > 0.9:
            pow = Pow(hit.rect.center)
            all_sprites.add(pow)
            powerups.add(pow)
        newmob()      ##### meteorlar patlayanların yenıne yeni meteorlar gelsin

#### patlatılan nesneler meteorlar ortaya çıkar

    ## check if the player collides with the mob
    hits = pygame.sprite.spritecollide(player, mobs, True, pygame.sprite.collide_circle)        ### vurulan meteorların kaybolmasını sağlar
    for hit in hits:
        player.shield -= hit.radius * 2 ##### verilen kalkan miktarı
        expl = Explosion(hit.rect.center, 'sm')
        all_sprites.add(expl)
        newmob() ##### kalkanı yenıden çağır
        if player.shield <= 0: 
            player_die_sound.play()
            death_explosion = Explosion(player.rect.center, 'player')
            all_sprites.add(death_explosion)

            player.hide()
            player.lives -= 1
            player.shield = 100

    ## if the player hit a power up
    hits = pygame.sprite.spritecollide(player, powerups, True)
    for hit in hits:
        if hit.type == 'shield':
            player.shield += random.randrange(10, 30)
            if player.shield >= 100: # random olarak 0-100 arası can yeniler
                player.shield = 100  ## kalkan en fazla 100 can yeniler
        if hit.type == 'gun':
            player.powerup()

    ### geminin vanı biterse geminin patlama sahnesinsen sonra oyun kapansın
    if player.lives == 0 and not death_explosion.alive():
        Oyunun_aktif = False

                            
    PENCERE.fill(SİYAH)  ## gemi patladıktan sonra ekran siyah olsun
    
    PENCERE.blit(ARKAPLAN, background_rect) ##arkaplan kapansın

    all_sprites.draw(PENCERE) ## ekrana yaz
    draw_text(PENCERE, str(SKOR), 18, YATAY_EKRAN_BOYUTU / 2, 10)     ### ekrana skoru yaz
    draw_shield_bar(PENCERE, 5, 5, player.shield)  ## ekrana kalkan miktarını koy

   
    draw_lives(PENCERE, YATAY_EKRAN_BOYUTU - 100, 5, player.lives, Uzay_Gemisi_Küçük) ### ekrana can miktarını koy

    
    pygame.display.flip()       #### yukarıda yazan komutları ekrana ver
 
pygame.quit()